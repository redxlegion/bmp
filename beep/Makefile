# Makefile.in generated by automake 1.15 from Makefile.am.
# beep/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994-2014 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.






am__is_gnu_make = { \
  if test -z '$(MAKELEVEL)'; then \
    false; \
  elif test -n '$(MAKE_HOST)'; then \
    true; \
  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \
    true; \
  else \
    false; \
  fi; \
}
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/bmp
pkgincludedir = $(includedir)/bmp
pkglibdir = $(libdir)/bmp
pkglibexecdir = $(libexecdir)/bmp
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-pc-linux-gnu
host_triplet = x86_64-pc-linux-gnu
target_triplet = x86_64-pc-linux-gnu
bin_PROGRAMS = beep$(EXEEXT)
subdir = beep
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/codeset.m4 \
	$(top_srcdir)/m4/gettext.m4 $(top_srcdir)/m4/glibc21.m4 \
	$(top_srcdir)/m4/iconv.m4 $(top_srcdir)/m4/intdiv0.m4 \
	$(top_srcdir)/m4/inttypes-pri.m4 $(top_srcdir)/m4/inttypes.m4 \
	$(top_srcdir)/m4/inttypes_h.m4 $(top_srcdir)/m4/isc-posix.m4 \
	$(top_srcdir)/m4/lcmessage.m4 $(top_srcdir)/m4/lib-ld.m4 \
	$(top_srcdir)/m4/lib-link.m4 $(top_srcdir)/m4/lib-prefix.m4 \
	$(top_srcdir)/m4/libtool.m4 $(top_srcdir)/m4/ltoptions.m4 \
	$(top_srcdir)/m4/ltsugar.m4 $(top_srcdir)/m4/ltversion.m4 \
	$(top_srcdir)/m4/lt~obsolete.m4 $(top_srcdir)/m4/nls.m4 \
	$(top_srcdir)/m4/pkg.m4 $(top_srcdir)/m4/po.m4 \
	$(top_srcdir)/m4/progtest.m4 $(top_srcdir)/m4/stdint_h.m4 \
	$(top_srcdir)/m4/uintmax_t.m4 $(top_srcdir)/m4/ulonglong.m4 \
	$(top_srcdir)/acinclude.m4 $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
DIST_COMMON = $(srcdir)/Makefile.am $(beepinclude_HEADERS) \
	$(am__DIST_COMMON)
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES = bmp.desktop
CONFIG_CLEAN_VPATH_FILES =
am__installdirs = "$(DESTDIR)$(bindir)" "$(DESTDIR)$(desktopdir)" \
	"$(DESTDIR)$(beepincludedir)"
PROGRAMS = $(bin_PROGRAMS)
am_beep_OBJECTS = beep-skin.$(OBJEXT) beep-util.$(OBJEXT) \
	beep-output.$(OBJEXT) beep-fft.$(OBJEXT) beep-input.$(OBJEXT) \
	beep-effect.$(OBJEXT) beep-general.$(OBJEXT) \
	beep-visualization.$(OBJEXT) beep-fullscreen.$(OBJEXT) \
	beep-pluginenum.$(OBJEXT) beep-playlist.$(OBJEXT) \
	beep-controlsocket.$(OBJEXT) beep-dock.$(OBJEXT) \
	beep-widget.$(OBJEXT) beep-sbutton.$(OBJEXT) \
	beep-pbutton.$(OBJEXT) beep-tbutton.$(OBJEXT) \
	beep-textbox.$(OBJEXT) beep-menurow.$(OBJEXT) \
	beep-hslider.$(OBJEXT) beep-monostereo.$(OBJEXT) \
	beep-vis.$(OBJEXT) beep-svis.$(OBJEXT) beep-number.$(OBJEXT) \
	beep-playback.$(OBJEXT) beep-playstatus.$(OBJEXT) \
	beep-playlist_list.$(OBJEXT) beep-playlist_slider.$(OBJEXT) \
	beep-playlist_popup.$(OBJEXT) beep-eq_graph.$(OBJEXT) \
	beep-eq_slider.$(OBJEXT) beep-main.$(OBJEXT) \
	beep-logger.$(OBJEXT) beep-xml_document.$(OBJEXT) \
	beep-mainwin.$(OBJEXT) beep-skinwin.$(OBJEXT) \
	beep-prefswin.$(OBJEXT) beep-playlistwin.$(OBJEXT) \
	beep-equalizer.$(OBJEXT) beep-glade.$(OBJEXT) \
	beep-hints.$(OBJEXT) beep-about.$(OBJEXT) \
	beep-softvolume.$(OBJEXT) beep-getopt.$(OBJEXT) \
	beep-getopt1.$(OBJEXT) beep-urldecode.$(OBJEXT) \
	beep-mkdtemp.$(OBJEXT) beep-iir.$(OBJEXT)
beep_OBJECTS = $(am_beep_OBJECTS)
am__DEPENDENCIES_1 =
beep_DEPENDENCIES = $(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(top_builddir)/libbeep/libbeep.la
AM_V_lt = $(am__v_lt_$(V))
am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))
am__v_lt_0 = --silent
am__v_lt_1 = 
beep_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(beep_CFLAGS) $(CFLAGS) \
	$(beep_LDFLAGS) $(LDFLAGS) -o $@
AM_V_P = $(am__v_P_$(V))
am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_$(V))
am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_$(V))
am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))
am__v_at_0 = @
am__v_at_1 = 
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CFLAGS) $(CFLAGS)
AM_V_CC = $(am__v_CC_$(V))
am__v_CC_ = $(am__v_CC_$(AM_DEFAULT_VERBOSITY))
am__v_CC_0 = @echo "  CC      " $@;
am__v_CC_1 = 
CCLD = $(CC)
LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CCLD = $(am__v_CCLD_$(V))
am__v_CCLD_ = $(am__v_CCLD_$(AM_DEFAULT_VERBOSITY))
am__v_CCLD_0 = @echo "  CCLD    " $@;
am__v_CCLD_1 = 
SOURCES = $(beep_SOURCES)
DIST_SOURCES = $(beep_SOURCES)
RECURSIVE_TARGETS = all-recursive check-recursive cscopelist-recursive \
	ctags-recursive dvi-recursive html-recursive info-recursive \
	install-data-recursive install-dvi-recursive \
	install-exec-recursive install-html-recursive \
	install-info-recursive install-pdf-recursive \
	install-ps-recursive install-recursive installcheck-recursive \
	installdirs-recursive pdf-recursive ps-recursive \
	tags-recursive uninstall-recursive
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
am__install_max = 40
am__nobase_strip_setup = \
  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
am__nobase_strip = \
  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
am__nobase_list = $(am__nobase_strip_setup); \
  for p in $$list; do echo "$$p $$p"; done | \
  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
    if (++n[$$2] == $(am__install_max)) \
      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
    END { for (dir in files) print dir, files[dir] }'
am__base_list = \
  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
am__uninstall_files_from_dir = { \
  test -z "$$files" \
    || { test ! -d "$$dir" && test ! -f "$$dir" && test ! -r "$$dir"; } \
    || { echo " ( cd '$$dir' && rm -f" $$files ")"; \
         $(am__cd) "$$dir" && rm -f $$files; }; \
  }
DATA = $(desktop_DATA)
HEADERS = $(beepinclude_HEADERS)
RECURSIVE_CLEAN_TARGETS = mostlyclean-recursive clean-recursive	\
  distclean-recursive maintainer-clean-recursive
am__recursive_targets = \
  $(RECURSIVE_TARGETS) \
  $(RECURSIVE_CLEAN_TARGETS) \
  $(am__extra_recursive_targets)
AM_RECURSIVE_TARGETS = $(am__recursive_targets:-recursive=) TAGS CTAGS \
	distdir
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
# Read a list of newline-separated strings from the standard input,
# and print each of them once, without duplicates.  Input order is
# *not* preserved.
am__uniquify_input = $(AWK) '\
  BEGIN { nonempty = 0; } \
  { items[$$0] = 1; nonempty = 1; } \
  END { if (nonempty) { for (i in items) print i; }; } \
'
# Make sure the list of sources is unique.  This is necessary because,
# e.g., the same source file might be shared among _SOURCES variables
# for different programs/libraries.
am__define_uniq_tagged_files = \
  list='$(am__tagged_files)'; \
  unique=`for i in $$list; do \
    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
  done | $(am__uniquify_input)`
ETAGS = etags
CTAGS = ctags
DIST_SUBDIRS = $(SUBDIRS)
am__DIST_COMMON = $(srcdir)/Makefile.in $(srcdir)/bmp.desktop.in \
	$(top_srcdir)/depcomp $(top_srcdir)/mkinstalldirs
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
am__relativize = \
  dir0=`pwd`; \
  sed_first='s,^\([^/]*\)/.*$$,\1,'; \
  sed_rest='s,^[^/]*/*,,'; \
  sed_last='s,^.*/\([^/]*\)$$,\1,'; \
  sed_butlast='s,/*[^/]*$$,,'; \
  while test -n "$$dir1"; do \
    first=`echo "$$dir1" | sed -e "$$sed_first"`; \
    if test "$$first" != "."; then \
      if test "$$first" = ".."; then \
        dir2=`echo "$$dir0" | sed -e "$$sed_last"`/"$$dir2"; \
        dir0=`echo "$$dir0" | sed -e "$$sed_butlast"`; \
      else \
        first2=`echo "$$dir2" | sed -e "$$sed_first"`; \
        if test "$$first2" = "$$first"; then \
          dir2=`echo "$$dir2" | sed -e "$$sed_rest"`; \
        else \
          dir2="../$$dir2"; \
        fi; \
        dir0="$$dir0"/"$$first"; \
      fi; \
    fi; \
    dir1=`echo "$$dir1" | sed -e "$$sed_rest"`; \
  done; \
  reldir="$$dir2"
transform = s/beep/beep-media-player/
ACLOCAL = aclocal-1.15
ALLOCA = 
ALSA_CFLAGS = 
ALSA_LIBS = 
AMTAR = $${TAR-tar}
AM_DEFAULT_VERBOSITY = 1
AR = ar
ARCH_DEFINES = 
AUTOCONF = autoconf
AUTOHEADER = autoheader
AUTOMAKE = automake-1.15
AWK = gawk
BEEP_DEFINES = -g -O2 -Wall -Wpointer-arith -finline-functions -ffast-math -funroll-all-loops -DDATA_DIR=\"${datarootdir}/bmp\" -DPLUGIN_DIR=\"${exec_prefix}/lib/bmp\" -DPLUGINSUBS=\"Output\",\"Input\",\"Effect\",\"General\",\"Visualization\" -DLOCALEDIR=\"${datarootdir}/locale\"
BEEP_PATH = /usr/local/bin/beep-media-player
BMP_RCPATH = 
BUILD_INCLUDED_LIBINTL = no
CATOBJEXT = .gmo
CC = gcc
CCAS = gcc
CCASDEPMODE = depmode=gcc3
CCASFLAGS = -g -O2
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2 -Wall -Wpointer-arith -finline-functions -ffast-math -funroll-all-loops 
CPP = gcc -E
CPPFLAGS = 
CYGPATH_W = echo
DATADIRNAME = share
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DLLTOOL = false
DSYMUTIL = 
DUMPBIN = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EFFECT_PLUGINS = $(ALL_PLUGINS)
EFFECT_PLUGIN_DIR = Effect
EGREP = /bin/grep -E
ESD_CFLAGS = 
ESD_LIBS = 
EXEEXT = 
FGREP = /bin/grep -F
GCONF_CFLAGS = 
GCONF_LIBS = 
GENCAT = gencat
GENERAL_PLUGINS = $(ALL_PLUGINS)
GENERAL_PLUGIN_DIR = General
GLIBC21 = yes
GMSGFMT = /usr/bin/msgfmt
GNOMEVFS_CFLAGS = 
GNOMEVFS_LIBS = 
GREP = /bin/grep
GTK_CFLAGS = -pthread -I/usr/include/gtk-2.0 -I/usr/lib/x86_64-linux-gnu/gtk-2.0/include -I/usr/include/gio-unix-2.0/ -I/usr/include/cairo -I/usr/include/pango-1.0 -I/usr/include/atk-1.0 -I/usr/include/cairo -I/usr/include/pixman-1 -I/usr/include/libpng16 -I/usr/include/gdk-pixbuf-2.0 -I/usr/include/libpng16 -I/usr/include/pango-1.0 -I/usr/include/harfbuzz -I/usr/include/freetype2 -I/usr/include/pango-1.0 -I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include
GTK_LIBS = -lgtk-x11-2.0 -lgdk-x11-2.0 -lpangocairo-1.0 -latk-1.0 -lcairo -lgdk_pixbuf-2.0 -lgio-2.0 -lpangoft2-1.0 -lfontconfig -lfreetype -lgthread-2.0 -pthread -lpango-1.0 -lgobject-2.0 -lglib-2.0
ID3LIBS = 
INPUT_PLUGINS = $(ALL_PLUGINS)
INPUT_PLUGIN_DIR = Input
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
INSTOBJEXT = .mo
INTLBISON = :
INTLLIBS = 
INTLOBJS = 
INTL_LIBTOOL_SUFFIX_PREFIX = 
LD = /usr/bin/ld -m elf_x86_64
LDFLAGS = 
LIBBEEP_MAJOR_VERSION = 2
LIBBEEP_MICRO_VERSION = 0
LIBBEEP_MINOR_VERSION = 0
LIBGLADE_CFLAGS = -pthread -I/usr/include/libglade-2.0 -I/usr/include/gtk-2.0 -I/usr/lib/x86_64-linux-gnu/gtk-2.0/include -I/usr/include/gio-unix-2.0/ -I/usr/include/cairo -I/usr/include/pango-1.0 -I/usr/include/atk-1.0 -I/usr/include/cairo -I/usr/include/pixman-1 -I/usr/include/libpng16 -I/usr/include/gdk-pixbuf-2.0 -I/usr/include/libpng16 -I/usr/include/pango-1.0 -I/usr/include/harfbuzz -I/usr/include/pango-1.0 -I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include -I/usr/include/freetype2 -I/usr/include/libxml2
LIBGLADE_LIBS = -lglade-2.0 -lgtk-x11-2.0 -lgdk-x11-2.0 -lpangocairo-1.0 -latk-1.0 -lcairo -lgdk_pixbuf-2.0 -lgio-2.0 -lpangoft2-1.0 -lpango-1.0 -lgobject-2.0 -lglib-2.0 -lfontconfig -lfreetype -lxml2
LIBICONV = 
LIBINTL = 
LIBOBJS = 
LIBS = 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIPO = 
LN_S = ln -s
LTLIBICONV = 
LTLIBINTL = 
LTLIBOBJS = 
LT_SYS_LIBRARY_PATH = 
MAKEINFO = makeinfo
MANIFEST_TOOL = :
MKDIR_P = /bin/mkdir -p
MKINSTALLDIRS = $(top_builddir)/./mkinstalldirs
MSGFMT = /usr/bin/msgfmt
MSGMERGE = /usr/bin/msgmerge
NM = /usr/bin/nm -B
NMEDIT = 
OBJDUMP = objdump
OBJEXT = o
OGG_VORBIS_CFLAGS = 
OGG_VORBIS_LIBS = -logg -lvorbis -lvorbisfile
OTOOL = 
OTOOL64 = 
OUTPUT_PLUGINS = $(ALL_PLUGINS)
OUTPUT_PLUGIN_DIR = Output
PACKAGE = bmp
PACKAGE_BUGREPORT = 
PACKAGE_NAME = bmp
PACKAGE_STRING = bmp 0.9.7.1
PACKAGE_TARNAME = bmp
PACKAGE_URL = 
PACKAGE_VERSION = 0.9.7.1
PATH_SEPARATOR = :
PC_REQUIRES = glib-2.0 >= 2.4.0, gtk+-2.0 >= 2.4.0
PKG_CONFIG = /usr/bin/pkg-config
PLUGIN_LDFLAGS = -module -avoid-version -export-symbols-regex "get_.plugin_info"
POSUB = po
RANLIB = ranlib
SED = /bin/sed
SET_MAKE = 
SHELL = /bin/bash
STRIP = strip
USE_INCLUDED_LIBINTL = no
USE_NLS = yes
VERSION = 0.9.7.1
VISUALIZATION_PLUGINS = $(ALL_PLUGINS)
VISUALIZATION_PLUGIN_DIR = Visualization
XGETTEXT = /usr/bin/xgettext
XMKMF = 
X_CFLAGS = 
X_EXTRA_LIBS = 
X_LIBS = 
X_PRE_LIBS =  -lSM -lICE
abs_builddir = /home/redlegion/eclipse-workspace/bmp/beep
abs_srcdir = /home/redlegion/eclipse-workspace/bmp/beep
abs_top_builddir = /home/redlegion/eclipse-workspace/bmp
abs_top_srcdir = /home/redlegion/eclipse-workspace/bmp
ac_ct_AR = ar
ac_ct_CC = gcc
ac_ct_DUMPBIN = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = $${TAR-tar} chof - "$$tardir"
am__untar = $${TAR-tar} xf -
beepdir = 
bindir = ${exec_prefix}/bin
build = x86_64-pc-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = pc
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = x86_64-pc-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = pc
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /home/redlegion/eclipse-workspace/bmp/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = $(MKDIR_P)
oldincludedir = /usr/include
pdfdir = ${docdir}
plugindir = ${exec_prefix}/lib/bmp
pluginsubs = \"Output\",\"Input\",\"Effect\",\"General\",\"Visualization\"
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
runstatedir = ${localstatedir}/run
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target = x86_64-pc-linux-gnu
target_alias = 
target_cpu = x86_64
target_os = linux-gnu
target_vendor = pc
top_build_prefix = ../
top_builddir = ..
top_srcdir = ..
SUBDIRS = glade images
beepincludedir = $(includedir)/bmp
beep_LDFLAGS = -export-dynamic -lgmodule-2.0 -lm
beep_LDADD = \
	$(X_LIBS) $(X_PRE_LIBS) -lX11 $(X_EXTRA_LIBS) \
	$(GTK_LIBS)      \
	$(LIBGLADE_LIBS) \
	$(LTLIBINTL)     \
	$(top_builddir)/libbeep/libbeep.la

beep_CFLAGS = \
	$(X_CFLAGS)        \
	$(GTK_CFLAGS)      \
	$(LIBGLADE_CFLAGS) \
	$(BEEP_DEFINES)    \
	$(ARCH_DEFINES)    \
	-I$(top_srcdir)    \
	-I$(top_srcdir)/intl

beep_SOURCES = \
	skin.c skin.h \
	util.c util.h \
	output.c output.h \
	fft.c fft.h \
	input.c input.h \
	effect.c effect.h \
	general.c general.h \
	visualization.c visualization.h \
	fullscreen.c fullscreen.h \
	pluginenum.c pluginenum.h \
	playlist.c playlist.h \
	controlsocket.c controlsocket.h \
	dock.c dock.h \
	widget.c widget.h \
	sbutton.c sbutton.h \
	pbutton.c pbutton.h \
	tbutton.c tbutton.h \
	textbox.c textbox.h \
	menurow.c menurow.h \
	hslider.c hslider.h \
	monostereo.c monostereo.h \
	vis.c vis.h \
	svis.c svis.h \
	number.c number.h \
	playback.c playback.h \
	playstatus.c playstatus.h \
	playlist_list.c playlist_list.h \
	playlist_slider.c playlist_slider.h \
	playlist_popup.c playlist_popup.h \
	eq_graph.c eq_graph.h \
	eq_slider.c eq_slider.h \
	main.c main.h \
	logger.c logger.h \
	xml_document.c xml_document.h \
	mainwin.c mainwin.h \
	skinwin.c skinwin.h \
	prefswin.c prefswin.h \
	playlistwin.c playlistwin.h \
	equalizer.c equalizer.h \
	glade.c glade.h \
	hints.c hints.h \
	about.c about.h \
	plugin.h \
	softvolume.c softvolume.h \
	getopt.c getopt1.c getopt.h \
	urldecode.c urldecode.h \
	dnd.h \
	debug.h \
	mkdtemp.c \
	pixmaps.h \
	iir.c iir.h \
	na.xpm beep_logo.xpm

beepinclude_HEADERS = plugin.h fullscreen.h
desktop_DATA = bmp.desktop
desktopdir = $(datadir)/applications
BUILT_SOURCES = pixmaps.h
embedded_icons = \
	info.png playlist.png play.png

EXTRA_DIST = \
	$(embedded_icons) build.list

all: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) all-recursive

.SUFFIXES:
.SUFFIXES: .c .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu beep/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --gnu beep/Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
bmp.desktop: $(top_builddir)/config.status $(srcdir)/bmp.desktop.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(bindir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(bindir)" || exit 1; \
	fi; \
	for p in $$list; do echo "$$p $$p"; done | \
	sed 's/$(EXEEXT)$$//' | \
	while read p p1; do if test -f $$p \
	 || test -f $$p1 \
	  ; then echo "$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n;h' \
	    -e 's|.*|.|' \
	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
	sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
	    else { print "f", $$3 "/" $$4, $$1; } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	    test -z "$$files" || { \
	    echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(bindir)$$dir'"; \
	    $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(bindir)$$dir" || exit $$?; \
	    } \
	; done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	files=`for p in $$list; do echo "$$p"; done | \
	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
	      -e 's/$$/$(EXEEXT)/' \
	`; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(bindir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(bindir)" && rm -f $$files

clean-binPROGRAMS:
	@list='$(bin_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list

beep$(EXEEXT): $(beep_OBJECTS) $(beep_DEPENDENCIES) $(EXTRA_beep_DEPENDENCIES) 
	@rm -f beep$(EXEEXT)
	$(AM_V_CCLD)$(beep_LINK) $(beep_OBJECTS) $(beep_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/beep-about.Po
include ./$(DEPDIR)/beep-controlsocket.Po
include ./$(DEPDIR)/beep-dock.Po
include ./$(DEPDIR)/beep-effect.Po
include ./$(DEPDIR)/beep-eq_graph.Po
include ./$(DEPDIR)/beep-eq_slider.Po
include ./$(DEPDIR)/beep-equalizer.Po
include ./$(DEPDIR)/beep-fft.Po
include ./$(DEPDIR)/beep-fullscreen.Po
include ./$(DEPDIR)/beep-general.Po
include ./$(DEPDIR)/beep-getopt.Po
include ./$(DEPDIR)/beep-getopt1.Po
include ./$(DEPDIR)/beep-glade.Po
include ./$(DEPDIR)/beep-hints.Po
include ./$(DEPDIR)/beep-hslider.Po
include ./$(DEPDIR)/beep-iir.Po
include ./$(DEPDIR)/beep-input.Po
include ./$(DEPDIR)/beep-logger.Po
include ./$(DEPDIR)/beep-main.Po
include ./$(DEPDIR)/beep-mainwin.Po
include ./$(DEPDIR)/beep-menurow.Po
include ./$(DEPDIR)/beep-mkdtemp.Po
include ./$(DEPDIR)/beep-monostereo.Po
include ./$(DEPDIR)/beep-number.Po
include ./$(DEPDIR)/beep-output.Po
include ./$(DEPDIR)/beep-pbutton.Po
include ./$(DEPDIR)/beep-playback.Po
include ./$(DEPDIR)/beep-playlist.Po
include ./$(DEPDIR)/beep-playlist_list.Po
include ./$(DEPDIR)/beep-playlist_popup.Po
include ./$(DEPDIR)/beep-playlist_slider.Po
include ./$(DEPDIR)/beep-playlistwin.Po
include ./$(DEPDIR)/beep-playstatus.Po
include ./$(DEPDIR)/beep-pluginenum.Po
include ./$(DEPDIR)/beep-prefswin.Po
include ./$(DEPDIR)/beep-sbutton.Po
include ./$(DEPDIR)/beep-skin.Po
include ./$(DEPDIR)/beep-skinwin.Po
include ./$(DEPDIR)/beep-softvolume.Po
include ./$(DEPDIR)/beep-svis.Po
include ./$(DEPDIR)/beep-tbutton.Po
include ./$(DEPDIR)/beep-textbox.Po
include ./$(DEPDIR)/beep-urldecode.Po
include ./$(DEPDIR)/beep-util.Po
include ./$(DEPDIR)/beep-vis.Po
include ./$(DEPDIR)/beep-visualization.Po
include ./$(DEPDIR)/beep-widget.Po
include ./$(DEPDIR)/beep-xml_document.Po

.c.o:
	$(AM_V_CC)$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	$(AM_V_CC)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(COMPILE) -c -o $@ $<

.c.obj:
	$(AM_V_CC)$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	$(AM_V_CC)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(COMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.c.lo:
	$(AM_V_CC)$(LTCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
#	$(AM_V_CC)source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(LTCOMPILE) -c -o $@ $<

beep-skin.o: skin.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-skin.o -MD -MP -MF $(DEPDIR)/beep-skin.Tpo -c -o beep-skin.o `test -f 'skin.c' || echo '$(srcdir)/'`skin.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-skin.Tpo $(DEPDIR)/beep-skin.Po
#	$(AM_V_CC)source='skin.c' object='beep-skin.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-skin.o `test -f 'skin.c' || echo '$(srcdir)/'`skin.c

beep-skin.obj: skin.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-skin.obj -MD -MP -MF $(DEPDIR)/beep-skin.Tpo -c -o beep-skin.obj `if test -f 'skin.c'; then $(CYGPATH_W) 'skin.c'; else $(CYGPATH_W) '$(srcdir)/skin.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-skin.Tpo $(DEPDIR)/beep-skin.Po
#	$(AM_V_CC)source='skin.c' object='beep-skin.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-skin.obj `if test -f 'skin.c'; then $(CYGPATH_W) 'skin.c'; else $(CYGPATH_W) '$(srcdir)/skin.c'; fi`

beep-util.o: util.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-util.o -MD -MP -MF $(DEPDIR)/beep-util.Tpo -c -o beep-util.o `test -f 'util.c' || echo '$(srcdir)/'`util.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-util.Tpo $(DEPDIR)/beep-util.Po
#	$(AM_V_CC)source='util.c' object='beep-util.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-util.o `test -f 'util.c' || echo '$(srcdir)/'`util.c

beep-util.obj: util.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-util.obj -MD -MP -MF $(DEPDIR)/beep-util.Tpo -c -o beep-util.obj `if test -f 'util.c'; then $(CYGPATH_W) 'util.c'; else $(CYGPATH_W) '$(srcdir)/util.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-util.Tpo $(DEPDIR)/beep-util.Po
#	$(AM_V_CC)source='util.c' object='beep-util.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-util.obj `if test -f 'util.c'; then $(CYGPATH_W) 'util.c'; else $(CYGPATH_W) '$(srcdir)/util.c'; fi`

beep-output.o: output.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-output.o -MD -MP -MF $(DEPDIR)/beep-output.Tpo -c -o beep-output.o `test -f 'output.c' || echo '$(srcdir)/'`output.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-output.Tpo $(DEPDIR)/beep-output.Po
#	$(AM_V_CC)source='output.c' object='beep-output.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-output.o `test -f 'output.c' || echo '$(srcdir)/'`output.c

beep-output.obj: output.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-output.obj -MD -MP -MF $(DEPDIR)/beep-output.Tpo -c -o beep-output.obj `if test -f 'output.c'; then $(CYGPATH_W) 'output.c'; else $(CYGPATH_W) '$(srcdir)/output.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-output.Tpo $(DEPDIR)/beep-output.Po
#	$(AM_V_CC)source='output.c' object='beep-output.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-output.obj `if test -f 'output.c'; then $(CYGPATH_W) 'output.c'; else $(CYGPATH_W) '$(srcdir)/output.c'; fi`

beep-fft.o: fft.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-fft.o -MD -MP -MF $(DEPDIR)/beep-fft.Tpo -c -o beep-fft.o `test -f 'fft.c' || echo '$(srcdir)/'`fft.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-fft.Tpo $(DEPDIR)/beep-fft.Po
#	$(AM_V_CC)source='fft.c' object='beep-fft.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-fft.o `test -f 'fft.c' || echo '$(srcdir)/'`fft.c

beep-fft.obj: fft.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-fft.obj -MD -MP -MF $(DEPDIR)/beep-fft.Tpo -c -o beep-fft.obj `if test -f 'fft.c'; then $(CYGPATH_W) 'fft.c'; else $(CYGPATH_W) '$(srcdir)/fft.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-fft.Tpo $(DEPDIR)/beep-fft.Po
#	$(AM_V_CC)source='fft.c' object='beep-fft.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-fft.obj `if test -f 'fft.c'; then $(CYGPATH_W) 'fft.c'; else $(CYGPATH_W) '$(srcdir)/fft.c'; fi`

beep-input.o: input.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-input.o -MD -MP -MF $(DEPDIR)/beep-input.Tpo -c -o beep-input.o `test -f 'input.c' || echo '$(srcdir)/'`input.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-input.Tpo $(DEPDIR)/beep-input.Po
#	$(AM_V_CC)source='input.c' object='beep-input.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-input.o `test -f 'input.c' || echo '$(srcdir)/'`input.c

beep-input.obj: input.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-input.obj -MD -MP -MF $(DEPDIR)/beep-input.Tpo -c -o beep-input.obj `if test -f 'input.c'; then $(CYGPATH_W) 'input.c'; else $(CYGPATH_W) '$(srcdir)/input.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-input.Tpo $(DEPDIR)/beep-input.Po
#	$(AM_V_CC)source='input.c' object='beep-input.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-input.obj `if test -f 'input.c'; then $(CYGPATH_W) 'input.c'; else $(CYGPATH_W) '$(srcdir)/input.c'; fi`

beep-effect.o: effect.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-effect.o -MD -MP -MF $(DEPDIR)/beep-effect.Tpo -c -o beep-effect.o `test -f 'effect.c' || echo '$(srcdir)/'`effect.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-effect.Tpo $(DEPDIR)/beep-effect.Po
#	$(AM_V_CC)source='effect.c' object='beep-effect.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-effect.o `test -f 'effect.c' || echo '$(srcdir)/'`effect.c

beep-effect.obj: effect.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-effect.obj -MD -MP -MF $(DEPDIR)/beep-effect.Tpo -c -o beep-effect.obj `if test -f 'effect.c'; then $(CYGPATH_W) 'effect.c'; else $(CYGPATH_W) '$(srcdir)/effect.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-effect.Tpo $(DEPDIR)/beep-effect.Po
#	$(AM_V_CC)source='effect.c' object='beep-effect.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-effect.obj `if test -f 'effect.c'; then $(CYGPATH_W) 'effect.c'; else $(CYGPATH_W) '$(srcdir)/effect.c'; fi`

beep-general.o: general.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-general.o -MD -MP -MF $(DEPDIR)/beep-general.Tpo -c -o beep-general.o `test -f 'general.c' || echo '$(srcdir)/'`general.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-general.Tpo $(DEPDIR)/beep-general.Po
#	$(AM_V_CC)source='general.c' object='beep-general.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-general.o `test -f 'general.c' || echo '$(srcdir)/'`general.c

beep-general.obj: general.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-general.obj -MD -MP -MF $(DEPDIR)/beep-general.Tpo -c -o beep-general.obj `if test -f 'general.c'; then $(CYGPATH_W) 'general.c'; else $(CYGPATH_W) '$(srcdir)/general.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-general.Tpo $(DEPDIR)/beep-general.Po
#	$(AM_V_CC)source='general.c' object='beep-general.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-general.obj `if test -f 'general.c'; then $(CYGPATH_W) 'general.c'; else $(CYGPATH_W) '$(srcdir)/general.c'; fi`

beep-visualization.o: visualization.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-visualization.o -MD -MP -MF $(DEPDIR)/beep-visualization.Tpo -c -o beep-visualization.o `test -f 'visualization.c' || echo '$(srcdir)/'`visualization.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-visualization.Tpo $(DEPDIR)/beep-visualization.Po
#	$(AM_V_CC)source='visualization.c' object='beep-visualization.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-visualization.o `test -f 'visualization.c' || echo '$(srcdir)/'`visualization.c

beep-visualization.obj: visualization.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-visualization.obj -MD -MP -MF $(DEPDIR)/beep-visualization.Tpo -c -o beep-visualization.obj `if test -f 'visualization.c'; then $(CYGPATH_W) 'visualization.c'; else $(CYGPATH_W) '$(srcdir)/visualization.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-visualization.Tpo $(DEPDIR)/beep-visualization.Po
#	$(AM_V_CC)source='visualization.c' object='beep-visualization.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-visualization.obj `if test -f 'visualization.c'; then $(CYGPATH_W) 'visualization.c'; else $(CYGPATH_W) '$(srcdir)/visualization.c'; fi`

beep-fullscreen.o: fullscreen.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-fullscreen.o -MD -MP -MF $(DEPDIR)/beep-fullscreen.Tpo -c -o beep-fullscreen.o `test -f 'fullscreen.c' || echo '$(srcdir)/'`fullscreen.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-fullscreen.Tpo $(DEPDIR)/beep-fullscreen.Po
#	$(AM_V_CC)source='fullscreen.c' object='beep-fullscreen.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-fullscreen.o `test -f 'fullscreen.c' || echo '$(srcdir)/'`fullscreen.c

beep-fullscreen.obj: fullscreen.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-fullscreen.obj -MD -MP -MF $(DEPDIR)/beep-fullscreen.Tpo -c -o beep-fullscreen.obj `if test -f 'fullscreen.c'; then $(CYGPATH_W) 'fullscreen.c'; else $(CYGPATH_W) '$(srcdir)/fullscreen.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-fullscreen.Tpo $(DEPDIR)/beep-fullscreen.Po
#	$(AM_V_CC)source='fullscreen.c' object='beep-fullscreen.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-fullscreen.obj `if test -f 'fullscreen.c'; then $(CYGPATH_W) 'fullscreen.c'; else $(CYGPATH_W) '$(srcdir)/fullscreen.c'; fi`

beep-pluginenum.o: pluginenum.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-pluginenum.o -MD -MP -MF $(DEPDIR)/beep-pluginenum.Tpo -c -o beep-pluginenum.o `test -f 'pluginenum.c' || echo '$(srcdir)/'`pluginenum.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-pluginenum.Tpo $(DEPDIR)/beep-pluginenum.Po
#	$(AM_V_CC)source='pluginenum.c' object='beep-pluginenum.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-pluginenum.o `test -f 'pluginenum.c' || echo '$(srcdir)/'`pluginenum.c

beep-pluginenum.obj: pluginenum.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-pluginenum.obj -MD -MP -MF $(DEPDIR)/beep-pluginenum.Tpo -c -o beep-pluginenum.obj `if test -f 'pluginenum.c'; then $(CYGPATH_W) 'pluginenum.c'; else $(CYGPATH_W) '$(srcdir)/pluginenum.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-pluginenum.Tpo $(DEPDIR)/beep-pluginenum.Po
#	$(AM_V_CC)source='pluginenum.c' object='beep-pluginenum.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-pluginenum.obj `if test -f 'pluginenum.c'; then $(CYGPATH_W) 'pluginenum.c'; else $(CYGPATH_W) '$(srcdir)/pluginenum.c'; fi`

beep-playlist.o: playlist.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-playlist.o -MD -MP -MF $(DEPDIR)/beep-playlist.Tpo -c -o beep-playlist.o `test -f 'playlist.c' || echo '$(srcdir)/'`playlist.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-playlist.Tpo $(DEPDIR)/beep-playlist.Po
#	$(AM_V_CC)source='playlist.c' object='beep-playlist.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-playlist.o `test -f 'playlist.c' || echo '$(srcdir)/'`playlist.c

beep-playlist.obj: playlist.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-playlist.obj -MD -MP -MF $(DEPDIR)/beep-playlist.Tpo -c -o beep-playlist.obj `if test -f 'playlist.c'; then $(CYGPATH_W) 'playlist.c'; else $(CYGPATH_W) '$(srcdir)/playlist.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-playlist.Tpo $(DEPDIR)/beep-playlist.Po
#	$(AM_V_CC)source='playlist.c' object='beep-playlist.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-playlist.obj `if test -f 'playlist.c'; then $(CYGPATH_W) 'playlist.c'; else $(CYGPATH_W) '$(srcdir)/playlist.c'; fi`

beep-controlsocket.o: controlsocket.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-controlsocket.o -MD -MP -MF $(DEPDIR)/beep-controlsocket.Tpo -c -o beep-controlsocket.o `test -f 'controlsocket.c' || echo '$(srcdir)/'`controlsocket.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-controlsocket.Tpo $(DEPDIR)/beep-controlsocket.Po
#	$(AM_V_CC)source='controlsocket.c' object='beep-controlsocket.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-controlsocket.o `test -f 'controlsocket.c' || echo '$(srcdir)/'`controlsocket.c

beep-controlsocket.obj: controlsocket.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-controlsocket.obj -MD -MP -MF $(DEPDIR)/beep-controlsocket.Tpo -c -o beep-controlsocket.obj `if test -f 'controlsocket.c'; then $(CYGPATH_W) 'controlsocket.c'; else $(CYGPATH_W) '$(srcdir)/controlsocket.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-controlsocket.Tpo $(DEPDIR)/beep-controlsocket.Po
#	$(AM_V_CC)source='controlsocket.c' object='beep-controlsocket.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-controlsocket.obj `if test -f 'controlsocket.c'; then $(CYGPATH_W) 'controlsocket.c'; else $(CYGPATH_W) '$(srcdir)/controlsocket.c'; fi`

beep-dock.o: dock.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-dock.o -MD -MP -MF $(DEPDIR)/beep-dock.Tpo -c -o beep-dock.o `test -f 'dock.c' || echo '$(srcdir)/'`dock.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-dock.Tpo $(DEPDIR)/beep-dock.Po
#	$(AM_V_CC)source='dock.c' object='beep-dock.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-dock.o `test -f 'dock.c' || echo '$(srcdir)/'`dock.c

beep-dock.obj: dock.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-dock.obj -MD -MP -MF $(DEPDIR)/beep-dock.Tpo -c -o beep-dock.obj `if test -f 'dock.c'; then $(CYGPATH_W) 'dock.c'; else $(CYGPATH_W) '$(srcdir)/dock.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-dock.Tpo $(DEPDIR)/beep-dock.Po
#	$(AM_V_CC)source='dock.c' object='beep-dock.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-dock.obj `if test -f 'dock.c'; then $(CYGPATH_W) 'dock.c'; else $(CYGPATH_W) '$(srcdir)/dock.c'; fi`

beep-widget.o: widget.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-widget.o -MD -MP -MF $(DEPDIR)/beep-widget.Tpo -c -o beep-widget.o `test -f 'widget.c' || echo '$(srcdir)/'`widget.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-widget.Tpo $(DEPDIR)/beep-widget.Po
#	$(AM_V_CC)source='widget.c' object='beep-widget.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-widget.o `test -f 'widget.c' || echo '$(srcdir)/'`widget.c

beep-widget.obj: widget.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-widget.obj -MD -MP -MF $(DEPDIR)/beep-widget.Tpo -c -o beep-widget.obj `if test -f 'widget.c'; then $(CYGPATH_W) 'widget.c'; else $(CYGPATH_W) '$(srcdir)/widget.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-widget.Tpo $(DEPDIR)/beep-widget.Po
#	$(AM_V_CC)source='widget.c' object='beep-widget.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-widget.obj `if test -f 'widget.c'; then $(CYGPATH_W) 'widget.c'; else $(CYGPATH_W) '$(srcdir)/widget.c'; fi`

beep-sbutton.o: sbutton.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-sbutton.o -MD -MP -MF $(DEPDIR)/beep-sbutton.Tpo -c -o beep-sbutton.o `test -f 'sbutton.c' || echo '$(srcdir)/'`sbutton.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-sbutton.Tpo $(DEPDIR)/beep-sbutton.Po
#	$(AM_V_CC)source='sbutton.c' object='beep-sbutton.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-sbutton.o `test -f 'sbutton.c' || echo '$(srcdir)/'`sbutton.c

beep-sbutton.obj: sbutton.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-sbutton.obj -MD -MP -MF $(DEPDIR)/beep-sbutton.Tpo -c -o beep-sbutton.obj `if test -f 'sbutton.c'; then $(CYGPATH_W) 'sbutton.c'; else $(CYGPATH_W) '$(srcdir)/sbutton.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-sbutton.Tpo $(DEPDIR)/beep-sbutton.Po
#	$(AM_V_CC)source='sbutton.c' object='beep-sbutton.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-sbutton.obj `if test -f 'sbutton.c'; then $(CYGPATH_W) 'sbutton.c'; else $(CYGPATH_W) '$(srcdir)/sbutton.c'; fi`

beep-pbutton.o: pbutton.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-pbutton.o -MD -MP -MF $(DEPDIR)/beep-pbutton.Tpo -c -o beep-pbutton.o `test -f 'pbutton.c' || echo '$(srcdir)/'`pbutton.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-pbutton.Tpo $(DEPDIR)/beep-pbutton.Po
#	$(AM_V_CC)source='pbutton.c' object='beep-pbutton.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-pbutton.o `test -f 'pbutton.c' || echo '$(srcdir)/'`pbutton.c

beep-pbutton.obj: pbutton.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-pbutton.obj -MD -MP -MF $(DEPDIR)/beep-pbutton.Tpo -c -o beep-pbutton.obj `if test -f 'pbutton.c'; then $(CYGPATH_W) 'pbutton.c'; else $(CYGPATH_W) '$(srcdir)/pbutton.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-pbutton.Tpo $(DEPDIR)/beep-pbutton.Po
#	$(AM_V_CC)source='pbutton.c' object='beep-pbutton.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-pbutton.obj `if test -f 'pbutton.c'; then $(CYGPATH_W) 'pbutton.c'; else $(CYGPATH_W) '$(srcdir)/pbutton.c'; fi`

beep-tbutton.o: tbutton.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-tbutton.o -MD -MP -MF $(DEPDIR)/beep-tbutton.Tpo -c -o beep-tbutton.o `test -f 'tbutton.c' || echo '$(srcdir)/'`tbutton.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-tbutton.Tpo $(DEPDIR)/beep-tbutton.Po
#	$(AM_V_CC)source='tbutton.c' object='beep-tbutton.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-tbutton.o `test -f 'tbutton.c' || echo '$(srcdir)/'`tbutton.c

beep-tbutton.obj: tbutton.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-tbutton.obj -MD -MP -MF $(DEPDIR)/beep-tbutton.Tpo -c -o beep-tbutton.obj `if test -f 'tbutton.c'; then $(CYGPATH_W) 'tbutton.c'; else $(CYGPATH_W) '$(srcdir)/tbutton.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-tbutton.Tpo $(DEPDIR)/beep-tbutton.Po
#	$(AM_V_CC)source='tbutton.c' object='beep-tbutton.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-tbutton.obj `if test -f 'tbutton.c'; then $(CYGPATH_W) 'tbutton.c'; else $(CYGPATH_W) '$(srcdir)/tbutton.c'; fi`

beep-textbox.o: textbox.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-textbox.o -MD -MP -MF $(DEPDIR)/beep-textbox.Tpo -c -o beep-textbox.o `test -f 'textbox.c' || echo '$(srcdir)/'`textbox.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-textbox.Tpo $(DEPDIR)/beep-textbox.Po
#	$(AM_V_CC)source='textbox.c' object='beep-textbox.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-textbox.o `test -f 'textbox.c' || echo '$(srcdir)/'`textbox.c

beep-textbox.obj: textbox.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-textbox.obj -MD -MP -MF $(DEPDIR)/beep-textbox.Tpo -c -o beep-textbox.obj `if test -f 'textbox.c'; then $(CYGPATH_W) 'textbox.c'; else $(CYGPATH_W) '$(srcdir)/textbox.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-textbox.Tpo $(DEPDIR)/beep-textbox.Po
#	$(AM_V_CC)source='textbox.c' object='beep-textbox.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-textbox.obj `if test -f 'textbox.c'; then $(CYGPATH_W) 'textbox.c'; else $(CYGPATH_W) '$(srcdir)/textbox.c'; fi`

beep-menurow.o: menurow.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-menurow.o -MD -MP -MF $(DEPDIR)/beep-menurow.Tpo -c -o beep-menurow.o `test -f 'menurow.c' || echo '$(srcdir)/'`menurow.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-menurow.Tpo $(DEPDIR)/beep-menurow.Po
#	$(AM_V_CC)source='menurow.c' object='beep-menurow.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-menurow.o `test -f 'menurow.c' || echo '$(srcdir)/'`menurow.c

beep-menurow.obj: menurow.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-menurow.obj -MD -MP -MF $(DEPDIR)/beep-menurow.Tpo -c -o beep-menurow.obj `if test -f 'menurow.c'; then $(CYGPATH_W) 'menurow.c'; else $(CYGPATH_W) '$(srcdir)/menurow.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-menurow.Tpo $(DEPDIR)/beep-menurow.Po
#	$(AM_V_CC)source='menurow.c' object='beep-menurow.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-menurow.obj `if test -f 'menurow.c'; then $(CYGPATH_W) 'menurow.c'; else $(CYGPATH_W) '$(srcdir)/menurow.c'; fi`

beep-hslider.o: hslider.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-hslider.o -MD -MP -MF $(DEPDIR)/beep-hslider.Tpo -c -o beep-hslider.o `test -f 'hslider.c' || echo '$(srcdir)/'`hslider.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-hslider.Tpo $(DEPDIR)/beep-hslider.Po
#	$(AM_V_CC)source='hslider.c' object='beep-hslider.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-hslider.o `test -f 'hslider.c' || echo '$(srcdir)/'`hslider.c

beep-hslider.obj: hslider.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-hslider.obj -MD -MP -MF $(DEPDIR)/beep-hslider.Tpo -c -o beep-hslider.obj `if test -f 'hslider.c'; then $(CYGPATH_W) 'hslider.c'; else $(CYGPATH_W) '$(srcdir)/hslider.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-hslider.Tpo $(DEPDIR)/beep-hslider.Po
#	$(AM_V_CC)source='hslider.c' object='beep-hslider.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-hslider.obj `if test -f 'hslider.c'; then $(CYGPATH_W) 'hslider.c'; else $(CYGPATH_W) '$(srcdir)/hslider.c'; fi`

beep-monostereo.o: monostereo.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-monostereo.o -MD -MP -MF $(DEPDIR)/beep-monostereo.Tpo -c -o beep-monostereo.o `test -f 'monostereo.c' || echo '$(srcdir)/'`monostereo.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-monostereo.Tpo $(DEPDIR)/beep-monostereo.Po
#	$(AM_V_CC)source='monostereo.c' object='beep-monostereo.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-monostereo.o `test -f 'monostereo.c' || echo '$(srcdir)/'`monostereo.c

beep-monostereo.obj: monostereo.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-monostereo.obj -MD -MP -MF $(DEPDIR)/beep-monostereo.Tpo -c -o beep-monostereo.obj `if test -f 'monostereo.c'; then $(CYGPATH_W) 'monostereo.c'; else $(CYGPATH_W) '$(srcdir)/monostereo.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-monostereo.Tpo $(DEPDIR)/beep-monostereo.Po
#	$(AM_V_CC)source='monostereo.c' object='beep-monostereo.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-monostereo.obj `if test -f 'monostereo.c'; then $(CYGPATH_W) 'monostereo.c'; else $(CYGPATH_W) '$(srcdir)/monostereo.c'; fi`

beep-vis.o: vis.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-vis.o -MD -MP -MF $(DEPDIR)/beep-vis.Tpo -c -o beep-vis.o `test -f 'vis.c' || echo '$(srcdir)/'`vis.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-vis.Tpo $(DEPDIR)/beep-vis.Po
#	$(AM_V_CC)source='vis.c' object='beep-vis.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-vis.o `test -f 'vis.c' || echo '$(srcdir)/'`vis.c

beep-vis.obj: vis.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-vis.obj -MD -MP -MF $(DEPDIR)/beep-vis.Tpo -c -o beep-vis.obj `if test -f 'vis.c'; then $(CYGPATH_W) 'vis.c'; else $(CYGPATH_W) '$(srcdir)/vis.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-vis.Tpo $(DEPDIR)/beep-vis.Po
#	$(AM_V_CC)source='vis.c' object='beep-vis.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-vis.obj `if test -f 'vis.c'; then $(CYGPATH_W) 'vis.c'; else $(CYGPATH_W) '$(srcdir)/vis.c'; fi`

beep-svis.o: svis.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-svis.o -MD -MP -MF $(DEPDIR)/beep-svis.Tpo -c -o beep-svis.o `test -f 'svis.c' || echo '$(srcdir)/'`svis.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-svis.Tpo $(DEPDIR)/beep-svis.Po
#	$(AM_V_CC)source='svis.c' object='beep-svis.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-svis.o `test -f 'svis.c' || echo '$(srcdir)/'`svis.c

beep-svis.obj: svis.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-svis.obj -MD -MP -MF $(DEPDIR)/beep-svis.Tpo -c -o beep-svis.obj `if test -f 'svis.c'; then $(CYGPATH_W) 'svis.c'; else $(CYGPATH_W) '$(srcdir)/svis.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-svis.Tpo $(DEPDIR)/beep-svis.Po
#	$(AM_V_CC)source='svis.c' object='beep-svis.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-svis.obj `if test -f 'svis.c'; then $(CYGPATH_W) 'svis.c'; else $(CYGPATH_W) '$(srcdir)/svis.c'; fi`

beep-number.o: number.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-number.o -MD -MP -MF $(DEPDIR)/beep-number.Tpo -c -o beep-number.o `test -f 'number.c' || echo '$(srcdir)/'`number.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-number.Tpo $(DEPDIR)/beep-number.Po
#	$(AM_V_CC)source='number.c' object='beep-number.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-number.o `test -f 'number.c' || echo '$(srcdir)/'`number.c

beep-number.obj: number.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-number.obj -MD -MP -MF $(DEPDIR)/beep-number.Tpo -c -o beep-number.obj `if test -f 'number.c'; then $(CYGPATH_W) 'number.c'; else $(CYGPATH_W) '$(srcdir)/number.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-number.Tpo $(DEPDIR)/beep-number.Po
#	$(AM_V_CC)source='number.c' object='beep-number.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-number.obj `if test -f 'number.c'; then $(CYGPATH_W) 'number.c'; else $(CYGPATH_W) '$(srcdir)/number.c'; fi`

beep-playback.o: playback.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-playback.o -MD -MP -MF $(DEPDIR)/beep-playback.Tpo -c -o beep-playback.o `test -f 'playback.c' || echo '$(srcdir)/'`playback.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-playback.Tpo $(DEPDIR)/beep-playback.Po
#	$(AM_V_CC)source='playback.c' object='beep-playback.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-playback.o `test -f 'playback.c' || echo '$(srcdir)/'`playback.c

beep-playback.obj: playback.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-playback.obj -MD -MP -MF $(DEPDIR)/beep-playback.Tpo -c -o beep-playback.obj `if test -f 'playback.c'; then $(CYGPATH_W) 'playback.c'; else $(CYGPATH_W) '$(srcdir)/playback.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-playback.Tpo $(DEPDIR)/beep-playback.Po
#	$(AM_V_CC)source='playback.c' object='beep-playback.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-playback.obj `if test -f 'playback.c'; then $(CYGPATH_W) 'playback.c'; else $(CYGPATH_W) '$(srcdir)/playback.c'; fi`

beep-playstatus.o: playstatus.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-playstatus.o -MD -MP -MF $(DEPDIR)/beep-playstatus.Tpo -c -o beep-playstatus.o `test -f 'playstatus.c' || echo '$(srcdir)/'`playstatus.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-playstatus.Tpo $(DEPDIR)/beep-playstatus.Po
#	$(AM_V_CC)source='playstatus.c' object='beep-playstatus.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-playstatus.o `test -f 'playstatus.c' || echo '$(srcdir)/'`playstatus.c

beep-playstatus.obj: playstatus.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-playstatus.obj -MD -MP -MF $(DEPDIR)/beep-playstatus.Tpo -c -o beep-playstatus.obj `if test -f 'playstatus.c'; then $(CYGPATH_W) 'playstatus.c'; else $(CYGPATH_W) '$(srcdir)/playstatus.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-playstatus.Tpo $(DEPDIR)/beep-playstatus.Po
#	$(AM_V_CC)source='playstatus.c' object='beep-playstatus.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-playstatus.obj `if test -f 'playstatus.c'; then $(CYGPATH_W) 'playstatus.c'; else $(CYGPATH_W) '$(srcdir)/playstatus.c'; fi`

beep-playlist_list.o: playlist_list.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-playlist_list.o -MD -MP -MF $(DEPDIR)/beep-playlist_list.Tpo -c -o beep-playlist_list.o `test -f 'playlist_list.c' || echo '$(srcdir)/'`playlist_list.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-playlist_list.Tpo $(DEPDIR)/beep-playlist_list.Po
#	$(AM_V_CC)source='playlist_list.c' object='beep-playlist_list.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-playlist_list.o `test -f 'playlist_list.c' || echo '$(srcdir)/'`playlist_list.c

beep-playlist_list.obj: playlist_list.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-playlist_list.obj -MD -MP -MF $(DEPDIR)/beep-playlist_list.Tpo -c -o beep-playlist_list.obj `if test -f 'playlist_list.c'; then $(CYGPATH_W) 'playlist_list.c'; else $(CYGPATH_W) '$(srcdir)/playlist_list.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-playlist_list.Tpo $(DEPDIR)/beep-playlist_list.Po
#	$(AM_V_CC)source='playlist_list.c' object='beep-playlist_list.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-playlist_list.obj `if test -f 'playlist_list.c'; then $(CYGPATH_W) 'playlist_list.c'; else $(CYGPATH_W) '$(srcdir)/playlist_list.c'; fi`

beep-playlist_slider.o: playlist_slider.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-playlist_slider.o -MD -MP -MF $(DEPDIR)/beep-playlist_slider.Tpo -c -o beep-playlist_slider.o `test -f 'playlist_slider.c' || echo '$(srcdir)/'`playlist_slider.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-playlist_slider.Tpo $(DEPDIR)/beep-playlist_slider.Po
#	$(AM_V_CC)source='playlist_slider.c' object='beep-playlist_slider.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-playlist_slider.o `test -f 'playlist_slider.c' || echo '$(srcdir)/'`playlist_slider.c

beep-playlist_slider.obj: playlist_slider.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-playlist_slider.obj -MD -MP -MF $(DEPDIR)/beep-playlist_slider.Tpo -c -o beep-playlist_slider.obj `if test -f 'playlist_slider.c'; then $(CYGPATH_W) 'playlist_slider.c'; else $(CYGPATH_W) '$(srcdir)/playlist_slider.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-playlist_slider.Tpo $(DEPDIR)/beep-playlist_slider.Po
#	$(AM_V_CC)source='playlist_slider.c' object='beep-playlist_slider.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-playlist_slider.obj `if test -f 'playlist_slider.c'; then $(CYGPATH_W) 'playlist_slider.c'; else $(CYGPATH_W) '$(srcdir)/playlist_slider.c'; fi`

beep-playlist_popup.o: playlist_popup.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-playlist_popup.o -MD -MP -MF $(DEPDIR)/beep-playlist_popup.Tpo -c -o beep-playlist_popup.o `test -f 'playlist_popup.c' || echo '$(srcdir)/'`playlist_popup.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-playlist_popup.Tpo $(DEPDIR)/beep-playlist_popup.Po
#	$(AM_V_CC)source='playlist_popup.c' object='beep-playlist_popup.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-playlist_popup.o `test -f 'playlist_popup.c' || echo '$(srcdir)/'`playlist_popup.c

beep-playlist_popup.obj: playlist_popup.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-playlist_popup.obj -MD -MP -MF $(DEPDIR)/beep-playlist_popup.Tpo -c -o beep-playlist_popup.obj `if test -f 'playlist_popup.c'; then $(CYGPATH_W) 'playlist_popup.c'; else $(CYGPATH_W) '$(srcdir)/playlist_popup.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-playlist_popup.Tpo $(DEPDIR)/beep-playlist_popup.Po
#	$(AM_V_CC)source='playlist_popup.c' object='beep-playlist_popup.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-playlist_popup.obj `if test -f 'playlist_popup.c'; then $(CYGPATH_W) 'playlist_popup.c'; else $(CYGPATH_W) '$(srcdir)/playlist_popup.c'; fi`

beep-eq_graph.o: eq_graph.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-eq_graph.o -MD -MP -MF $(DEPDIR)/beep-eq_graph.Tpo -c -o beep-eq_graph.o `test -f 'eq_graph.c' || echo '$(srcdir)/'`eq_graph.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-eq_graph.Tpo $(DEPDIR)/beep-eq_graph.Po
#	$(AM_V_CC)source='eq_graph.c' object='beep-eq_graph.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-eq_graph.o `test -f 'eq_graph.c' || echo '$(srcdir)/'`eq_graph.c

beep-eq_graph.obj: eq_graph.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-eq_graph.obj -MD -MP -MF $(DEPDIR)/beep-eq_graph.Tpo -c -o beep-eq_graph.obj `if test -f 'eq_graph.c'; then $(CYGPATH_W) 'eq_graph.c'; else $(CYGPATH_W) '$(srcdir)/eq_graph.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-eq_graph.Tpo $(DEPDIR)/beep-eq_graph.Po
#	$(AM_V_CC)source='eq_graph.c' object='beep-eq_graph.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-eq_graph.obj `if test -f 'eq_graph.c'; then $(CYGPATH_W) 'eq_graph.c'; else $(CYGPATH_W) '$(srcdir)/eq_graph.c'; fi`

beep-eq_slider.o: eq_slider.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-eq_slider.o -MD -MP -MF $(DEPDIR)/beep-eq_slider.Tpo -c -o beep-eq_slider.o `test -f 'eq_slider.c' || echo '$(srcdir)/'`eq_slider.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-eq_slider.Tpo $(DEPDIR)/beep-eq_slider.Po
#	$(AM_V_CC)source='eq_slider.c' object='beep-eq_slider.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-eq_slider.o `test -f 'eq_slider.c' || echo '$(srcdir)/'`eq_slider.c

beep-eq_slider.obj: eq_slider.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-eq_slider.obj -MD -MP -MF $(DEPDIR)/beep-eq_slider.Tpo -c -o beep-eq_slider.obj `if test -f 'eq_slider.c'; then $(CYGPATH_W) 'eq_slider.c'; else $(CYGPATH_W) '$(srcdir)/eq_slider.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-eq_slider.Tpo $(DEPDIR)/beep-eq_slider.Po
#	$(AM_V_CC)source='eq_slider.c' object='beep-eq_slider.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-eq_slider.obj `if test -f 'eq_slider.c'; then $(CYGPATH_W) 'eq_slider.c'; else $(CYGPATH_W) '$(srcdir)/eq_slider.c'; fi`

beep-main.o: main.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-main.o -MD -MP -MF $(DEPDIR)/beep-main.Tpo -c -o beep-main.o `test -f 'main.c' || echo '$(srcdir)/'`main.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-main.Tpo $(DEPDIR)/beep-main.Po
#	$(AM_V_CC)source='main.c' object='beep-main.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-main.o `test -f 'main.c' || echo '$(srcdir)/'`main.c

beep-main.obj: main.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-main.obj -MD -MP -MF $(DEPDIR)/beep-main.Tpo -c -o beep-main.obj `if test -f 'main.c'; then $(CYGPATH_W) 'main.c'; else $(CYGPATH_W) '$(srcdir)/main.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-main.Tpo $(DEPDIR)/beep-main.Po
#	$(AM_V_CC)source='main.c' object='beep-main.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-main.obj `if test -f 'main.c'; then $(CYGPATH_W) 'main.c'; else $(CYGPATH_W) '$(srcdir)/main.c'; fi`

beep-logger.o: logger.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-logger.o -MD -MP -MF $(DEPDIR)/beep-logger.Tpo -c -o beep-logger.o `test -f 'logger.c' || echo '$(srcdir)/'`logger.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-logger.Tpo $(DEPDIR)/beep-logger.Po
#	$(AM_V_CC)source='logger.c' object='beep-logger.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-logger.o `test -f 'logger.c' || echo '$(srcdir)/'`logger.c

beep-logger.obj: logger.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-logger.obj -MD -MP -MF $(DEPDIR)/beep-logger.Tpo -c -o beep-logger.obj `if test -f 'logger.c'; then $(CYGPATH_W) 'logger.c'; else $(CYGPATH_W) '$(srcdir)/logger.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-logger.Tpo $(DEPDIR)/beep-logger.Po
#	$(AM_V_CC)source='logger.c' object='beep-logger.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-logger.obj `if test -f 'logger.c'; then $(CYGPATH_W) 'logger.c'; else $(CYGPATH_W) '$(srcdir)/logger.c'; fi`

beep-xml_document.o: xml_document.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-xml_document.o -MD -MP -MF $(DEPDIR)/beep-xml_document.Tpo -c -o beep-xml_document.o `test -f 'xml_document.c' || echo '$(srcdir)/'`xml_document.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-xml_document.Tpo $(DEPDIR)/beep-xml_document.Po
#	$(AM_V_CC)source='xml_document.c' object='beep-xml_document.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-xml_document.o `test -f 'xml_document.c' || echo '$(srcdir)/'`xml_document.c

beep-xml_document.obj: xml_document.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-xml_document.obj -MD -MP -MF $(DEPDIR)/beep-xml_document.Tpo -c -o beep-xml_document.obj `if test -f 'xml_document.c'; then $(CYGPATH_W) 'xml_document.c'; else $(CYGPATH_W) '$(srcdir)/xml_document.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-xml_document.Tpo $(DEPDIR)/beep-xml_document.Po
#	$(AM_V_CC)source='xml_document.c' object='beep-xml_document.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-xml_document.obj `if test -f 'xml_document.c'; then $(CYGPATH_W) 'xml_document.c'; else $(CYGPATH_W) '$(srcdir)/xml_document.c'; fi`

beep-mainwin.o: mainwin.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-mainwin.o -MD -MP -MF $(DEPDIR)/beep-mainwin.Tpo -c -o beep-mainwin.o `test -f 'mainwin.c' || echo '$(srcdir)/'`mainwin.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-mainwin.Tpo $(DEPDIR)/beep-mainwin.Po
#	$(AM_V_CC)source='mainwin.c' object='beep-mainwin.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-mainwin.o `test -f 'mainwin.c' || echo '$(srcdir)/'`mainwin.c

beep-mainwin.obj: mainwin.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-mainwin.obj -MD -MP -MF $(DEPDIR)/beep-mainwin.Tpo -c -o beep-mainwin.obj `if test -f 'mainwin.c'; then $(CYGPATH_W) 'mainwin.c'; else $(CYGPATH_W) '$(srcdir)/mainwin.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-mainwin.Tpo $(DEPDIR)/beep-mainwin.Po
#	$(AM_V_CC)source='mainwin.c' object='beep-mainwin.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-mainwin.obj `if test -f 'mainwin.c'; then $(CYGPATH_W) 'mainwin.c'; else $(CYGPATH_W) '$(srcdir)/mainwin.c'; fi`

beep-skinwin.o: skinwin.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-skinwin.o -MD -MP -MF $(DEPDIR)/beep-skinwin.Tpo -c -o beep-skinwin.o `test -f 'skinwin.c' || echo '$(srcdir)/'`skinwin.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-skinwin.Tpo $(DEPDIR)/beep-skinwin.Po
#	$(AM_V_CC)source='skinwin.c' object='beep-skinwin.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-skinwin.o `test -f 'skinwin.c' || echo '$(srcdir)/'`skinwin.c

beep-skinwin.obj: skinwin.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-skinwin.obj -MD -MP -MF $(DEPDIR)/beep-skinwin.Tpo -c -o beep-skinwin.obj `if test -f 'skinwin.c'; then $(CYGPATH_W) 'skinwin.c'; else $(CYGPATH_W) '$(srcdir)/skinwin.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-skinwin.Tpo $(DEPDIR)/beep-skinwin.Po
#	$(AM_V_CC)source='skinwin.c' object='beep-skinwin.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-skinwin.obj `if test -f 'skinwin.c'; then $(CYGPATH_W) 'skinwin.c'; else $(CYGPATH_W) '$(srcdir)/skinwin.c'; fi`

beep-prefswin.o: prefswin.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-prefswin.o -MD -MP -MF $(DEPDIR)/beep-prefswin.Tpo -c -o beep-prefswin.o `test -f 'prefswin.c' || echo '$(srcdir)/'`prefswin.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-prefswin.Tpo $(DEPDIR)/beep-prefswin.Po
#	$(AM_V_CC)source='prefswin.c' object='beep-prefswin.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-prefswin.o `test -f 'prefswin.c' || echo '$(srcdir)/'`prefswin.c

beep-prefswin.obj: prefswin.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-prefswin.obj -MD -MP -MF $(DEPDIR)/beep-prefswin.Tpo -c -o beep-prefswin.obj `if test -f 'prefswin.c'; then $(CYGPATH_W) 'prefswin.c'; else $(CYGPATH_W) '$(srcdir)/prefswin.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-prefswin.Tpo $(DEPDIR)/beep-prefswin.Po
#	$(AM_V_CC)source='prefswin.c' object='beep-prefswin.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-prefswin.obj `if test -f 'prefswin.c'; then $(CYGPATH_W) 'prefswin.c'; else $(CYGPATH_W) '$(srcdir)/prefswin.c'; fi`

beep-playlistwin.o: playlistwin.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-playlistwin.o -MD -MP -MF $(DEPDIR)/beep-playlistwin.Tpo -c -o beep-playlistwin.o `test -f 'playlistwin.c' || echo '$(srcdir)/'`playlistwin.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-playlistwin.Tpo $(DEPDIR)/beep-playlistwin.Po
#	$(AM_V_CC)source='playlistwin.c' object='beep-playlistwin.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-playlistwin.o `test -f 'playlistwin.c' || echo '$(srcdir)/'`playlistwin.c

beep-playlistwin.obj: playlistwin.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-playlistwin.obj -MD -MP -MF $(DEPDIR)/beep-playlistwin.Tpo -c -o beep-playlistwin.obj `if test -f 'playlistwin.c'; then $(CYGPATH_W) 'playlistwin.c'; else $(CYGPATH_W) '$(srcdir)/playlistwin.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-playlistwin.Tpo $(DEPDIR)/beep-playlistwin.Po
#	$(AM_V_CC)source='playlistwin.c' object='beep-playlistwin.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-playlistwin.obj `if test -f 'playlistwin.c'; then $(CYGPATH_W) 'playlistwin.c'; else $(CYGPATH_W) '$(srcdir)/playlistwin.c'; fi`

beep-equalizer.o: equalizer.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-equalizer.o -MD -MP -MF $(DEPDIR)/beep-equalizer.Tpo -c -o beep-equalizer.o `test -f 'equalizer.c' || echo '$(srcdir)/'`equalizer.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-equalizer.Tpo $(DEPDIR)/beep-equalizer.Po
#	$(AM_V_CC)source='equalizer.c' object='beep-equalizer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-equalizer.o `test -f 'equalizer.c' || echo '$(srcdir)/'`equalizer.c

beep-equalizer.obj: equalizer.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-equalizer.obj -MD -MP -MF $(DEPDIR)/beep-equalizer.Tpo -c -o beep-equalizer.obj `if test -f 'equalizer.c'; then $(CYGPATH_W) 'equalizer.c'; else $(CYGPATH_W) '$(srcdir)/equalizer.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-equalizer.Tpo $(DEPDIR)/beep-equalizer.Po
#	$(AM_V_CC)source='equalizer.c' object='beep-equalizer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-equalizer.obj `if test -f 'equalizer.c'; then $(CYGPATH_W) 'equalizer.c'; else $(CYGPATH_W) '$(srcdir)/equalizer.c'; fi`

beep-glade.o: glade.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-glade.o -MD -MP -MF $(DEPDIR)/beep-glade.Tpo -c -o beep-glade.o `test -f 'glade.c' || echo '$(srcdir)/'`glade.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-glade.Tpo $(DEPDIR)/beep-glade.Po
#	$(AM_V_CC)source='glade.c' object='beep-glade.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-glade.o `test -f 'glade.c' || echo '$(srcdir)/'`glade.c

beep-glade.obj: glade.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-glade.obj -MD -MP -MF $(DEPDIR)/beep-glade.Tpo -c -o beep-glade.obj `if test -f 'glade.c'; then $(CYGPATH_W) 'glade.c'; else $(CYGPATH_W) '$(srcdir)/glade.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-glade.Tpo $(DEPDIR)/beep-glade.Po
#	$(AM_V_CC)source='glade.c' object='beep-glade.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-glade.obj `if test -f 'glade.c'; then $(CYGPATH_W) 'glade.c'; else $(CYGPATH_W) '$(srcdir)/glade.c'; fi`

beep-hints.o: hints.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-hints.o -MD -MP -MF $(DEPDIR)/beep-hints.Tpo -c -o beep-hints.o `test -f 'hints.c' || echo '$(srcdir)/'`hints.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-hints.Tpo $(DEPDIR)/beep-hints.Po
#	$(AM_V_CC)source='hints.c' object='beep-hints.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-hints.o `test -f 'hints.c' || echo '$(srcdir)/'`hints.c

beep-hints.obj: hints.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-hints.obj -MD -MP -MF $(DEPDIR)/beep-hints.Tpo -c -o beep-hints.obj `if test -f 'hints.c'; then $(CYGPATH_W) 'hints.c'; else $(CYGPATH_W) '$(srcdir)/hints.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-hints.Tpo $(DEPDIR)/beep-hints.Po
#	$(AM_V_CC)source='hints.c' object='beep-hints.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-hints.obj `if test -f 'hints.c'; then $(CYGPATH_W) 'hints.c'; else $(CYGPATH_W) '$(srcdir)/hints.c'; fi`

beep-about.o: about.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-about.o -MD -MP -MF $(DEPDIR)/beep-about.Tpo -c -o beep-about.o `test -f 'about.c' || echo '$(srcdir)/'`about.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-about.Tpo $(DEPDIR)/beep-about.Po
#	$(AM_V_CC)source='about.c' object='beep-about.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-about.o `test -f 'about.c' || echo '$(srcdir)/'`about.c

beep-about.obj: about.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-about.obj -MD -MP -MF $(DEPDIR)/beep-about.Tpo -c -o beep-about.obj `if test -f 'about.c'; then $(CYGPATH_W) 'about.c'; else $(CYGPATH_W) '$(srcdir)/about.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-about.Tpo $(DEPDIR)/beep-about.Po
#	$(AM_V_CC)source='about.c' object='beep-about.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-about.obj `if test -f 'about.c'; then $(CYGPATH_W) 'about.c'; else $(CYGPATH_W) '$(srcdir)/about.c'; fi`

beep-softvolume.o: softvolume.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-softvolume.o -MD -MP -MF $(DEPDIR)/beep-softvolume.Tpo -c -o beep-softvolume.o `test -f 'softvolume.c' || echo '$(srcdir)/'`softvolume.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-softvolume.Tpo $(DEPDIR)/beep-softvolume.Po
#	$(AM_V_CC)source='softvolume.c' object='beep-softvolume.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-softvolume.o `test -f 'softvolume.c' || echo '$(srcdir)/'`softvolume.c

beep-softvolume.obj: softvolume.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-softvolume.obj -MD -MP -MF $(DEPDIR)/beep-softvolume.Tpo -c -o beep-softvolume.obj `if test -f 'softvolume.c'; then $(CYGPATH_W) 'softvolume.c'; else $(CYGPATH_W) '$(srcdir)/softvolume.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-softvolume.Tpo $(DEPDIR)/beep-softvolume.Po
#	$(AM_V_CC)source='softvolume.c' object='beep-softvolume.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-softvolume.obj `if test -f 'softvolume.c'; then $(CYGPATH_W) 'softvolume.c'; else $(CYGPATH_W) '$(srcdir)/softvolume.c'; fi`

beep-getopt.o: getopt.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-getopt.o -MD -MP -MF $(DEPDIR)/beep-getopt.Tpo -c -o beep-getopt.o `test -f 'getopt.c' || echo '$(srcdir)/'`getopt.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-getopt.Tpo $(DEPDIR)/beep-getopt.Po
#	$(AM_V_CC)source='getopt.c' object='beep-getopt.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-getopt.o `test -f 'getopt.c' || echo '$(srcdir)/'`getopt.c

beep-getopt.obj: getopt.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-getopt.obj -MD -MP -MF $(DEPDIR)/beep-getopt.Tpo -c -o beep-getopt.obj `if test -f 'getopt.c'; then $(CYGPATH_W) 'getopt.c'; else $(CYGPATH_W) '$(srcdir)/getopt.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-getopt.Tpo $(DEPDIR)/beep-getopt.Po
#	$(AM_V_CC)source='getopt.c' object='beep-getopt.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-getopt.obj `if test -f 'getopt.c'; then $(CYGPATH_W) 'getopt.c'; else $(CYGPATH_W) '$(srcdir)/getopt.c'; fi`

beep-getopt1.o: getopt1.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-getopt1.o -MD -MP -MF $(DEPDIR)/beep-getopt1.Tpo -c -o beep-getopt1.o `test -f 'getopt1.c' || echo '$(srcdir)/'`getopt1.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-getopt1.Tpo $(DEPDIR)/beep-getopt1.Po
#	$(AM_V_CC)source='getopt1.c' object='beep-getopt1.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-getopt1.o `test -f 'getopt1.c' || echo '$(srcdir)/'`getopt1.c

beep-getopt1.obj: getopt1.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-getopt1.obj -MD -MP -MF $(DEPDIR)/beep-getopt1.Tpo -c -o beep-getopt1.obj `if test -f 'getopt1.c'; then $(CYGPATH_W) 'getopt1.c'; else $(CYGPATH_W) '$(srcdir)/getopt1.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-getopt1.Tpo $(DEPDIR)/beep-getopt1.Po
#	$(AM_V_CC)source='getopt1.c' object='beep-getopt1.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-getopt1.obj `if test -f 'getopt1.c'; then $(CYGPATH_W) 'getopt1.c'; else $(CYGPATH_W) '$(srcdir)/getopt1.c'; fi`

beep-urldecode.o: urldecode.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-urldecode.o -MD -MP -MF $(DEPDIR)/beep-urldecode.Tpo -c -o beep-urldecode.o `test -f 'urldecode.c' || echo '$(srcdir)/'`urldecode.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-urldecode.Tpo $(DEPDIR)/beep-urldecode.Po
#	$(AM_V_CC)source='urldecode.c' object='beep-urldecode.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-urldecode.o `test -f 'urldecode.c' || echo '$(srcdir)/'`urldecode.c

beep-urldecode.obj: urldecode.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-urldecode.obj -MD -MP -MF $(DEPDIR)/beep-urldecode.Tpo -c -o beep-urldecode.obj `if test -f 'urldecode.c'; then $(CYGPATH_W) 'urldecode.c'; else $(CYGPATH_W) '$(srcdir)/urldecode.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-urldecode.Tpo $(DEPDIR)/beep-urldecode.Po
#	$(AM_V_CC)source='urldecode.c' object='beep-urldecode.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-urldecode.obj `if test -f 'urldecode.c'; then $(CYGPATH_W) 'urldecode.c'; else $(CYGPATH_W) '$(srcdir)/urldecode.c'; fi`

beep-mkdtemp.o: mkdtemp.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-mkdtemp.o -MD -MP -MF $(DEPDIR)/beep-mkdtemp.Tpo -c -o beep-mkdtemp.o `test -f 'mkdtemp.c' || echo '$(srcdir)/'`mkdtemp.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-mkdtemp.Tpo $(DEPDIR)/beep-mkdtemp.Po
#	$(AM_V_CC)source='mkdtemp.c' object='beep-mkdtemp.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-mkdtemp.o `test -f 'mkdtemp.c' || echo '$(srcdir)/'`mkdtemp.c

beep-mkdtemp.obj: mkdtemp.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-mkdtemp.obj -MD -MP -MF $(DEPDIR)/beep-mkdtemp.Tpo -c -o beep-mkdtemp.obj `if test -f 'mkdtemp.c'; then $(CYGPATH_W) 'mkdtemp.c'; else $(CYGPATH_W) '$(srcdir)/mkdtemp.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-mkdtemp.Tpo $(DEPDIR)/beep-mkdtemp.Po
#	$(AM_V_CC)source='mkdtemp.c' object='beep-mkdtemp.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-mkdtemp.obj `if test -f 'mkdtemp.c'; then $(CYGPATH_W) 'mkdtemp.c'; else $(CYGPATH_W) '$(srcdir)/mkdtemp.c'; fi`

beep-iir.o: iir.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-iir.o -MD -MP -MF $(DEPDIR)/beep-iir.Tpo -c -o beep-iir.o `test -f 'iir.c' || echo '$(srcdir)/'`iir.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-iir.Tpo $(DEPDIR)/beep-iir.Po
#	$(AM_V_CC)source='iir.c' object='beep-iir.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-iir.o `test -f 'iir.c' || echo '$(srcdir)/'`iir.c

beep-iir.obj: iir.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -MT beep-iir.obj -MD -MP -MF $(DEPDIR)/beep-iir.Tpo -c -o beep-iir.obj `if test -f 'iir.c'; then $(CYGPATH_W) 'iir.c'; else $(CYGPATH_W) '$(srcdir)/iir.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/beep-iir.Tpo $(DEPDIR)/beep-iir.Po
#	$(AM_V_CC)source='iir.c' object='beep-iir.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(beep_CFLAGS) $(CFLAGS) -c -o beep-iir.obj `if test -f 'iir.c'; then $(CYGPATH_W) 'iir.c'; else $(CYGPATH_W) '$(srcdir)/iir.c'; fi`

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs
install-desktopDATA: $(desktop_DATA)
	@$(NORMAL_INSTALL)
	@list='$(desktop_DATA)'; test -n "$(desktopdir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(desktopdir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(desktopdir)" || exit 1; \
	fi; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_DATA) $$files '$(DESTDIR)$(desktopdir)'"; \
	  $(INSTALL_DATA) $$files "$(DESTDIR)$(desktopdir)" || exit $$?; \
	done

uninstall-desktopDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(desktop_DATA)'; test -n "$(desktopdir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	dir='$(DESTDIR)$(desktopdir)'; $(am__uninstall_files_from_dir)
install-beepincludeHEADERS: $(beepinclude_HEADERS)
	@$(NORMAL_INSTALL)
	@list='$(beepinclude_HEADERS)'; test -n "$(beepincludedir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(beepincludedir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(beepincludedir)" || exit 1; \
	fi; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_HEADER) $$files '$(DESTDIR)$(beepincludedir)'"; \
	  $(INSTALL_HEADER) $$files "$(DESTDIR)$(beepincludedir)" || exit $$?; \
	done

uninstall-beepincludeHEADERS:
	@$(NORMAL_UNINSTALL)
	@list='$(beepinclude_HEADERS)'; test -n "$(beepincludedir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	dir='$(DESTDIR)$(beepincludedir)'; $(am__uninstall_files_from_dir)

# This directory's subdirectories are mostly independent; you can cd
# into them and run 'make' without going through this Makefile.
# To change the values of 'make' variables: instead of editing Makefiles,
# (1) if the variable is set in 'config.status', edit 'config.status'
#     (which will cause the Makefiles to be regenerated when you run 'make');
# (2) otherwise, pass the desired values on the 'make' command line.
$(am__recursive_targets):
	@fail=; \
	if $(am__make_keepgoing); then \
	  failcom='fail=yes'; \
	else \
	  failcom='exit 1'; \
	fi; \
	dot_seen=no; \
	target=`echo $@ | sed s/-recursive//`; \
	case "$@" in \
	  distclean-* | maintainer-clean-*) list='$(DIST_SUBDIRS)' ;; \
	  *) list='$(SUBDIRS)' ;; \
	esac; \
	for subdir in $$list; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    dot_seen=yes; \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  ($(am__cd) $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done; \
	if test "$$dot_seen" = "no"; then \
	  $(MAKE) $(AM_MAKEFLAGS) "$$target-am" || exit 1; \
	fi; test -z "$$fail"

ID: $(am__tagged_files)
	$(am__define_uniq_tagged_files); mkid -fID $$unique
tags: tags-recursive
TAGS: tags

tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	set x; \
	here=`pwd`; \
	if ($(ETAGS) --etags-include --version) >/dev/null 2>&1; then \
	  include_option=--etags-include; \
	  empty_fix=.; \
	else \
	  include_option=--include; \
	  empty_fix=; \
	fi; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test ! -f $$subdir/TAGS || \
	      set "$$@" "$$include_option=$$here/$$subdir/TAGS"; \
	  fi; \
	done; \
	$(am__define_uniq_tagged_files); \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: ctags-recursive

CTAGS: ctags
ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	$(am__define_uniq_tagged_files); \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"
cscopelist: cscopelist-recursive

cscopelist-am: $(am__tagged_files)
	list='$(am__tagged_files)'; \
	case "$(srcdir)" in \
	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
	  *) sdir=$(subdir)/$(srcdir) ;; \
	esac; \
	for i in $$list; do \
	  if test -f "$$i"; then \
	    echo "$(subdir)/$$i"; \
	  else \
	    echo "$$sdir/$$i"; \
	  fi; \
	done >> $(top_builddir)/cscope.files

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
	@list='$(DIST_SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    $(am__make_dryrun) \
	      || test -d "$(distdir)/$$subdir" \
	      || $(MKDIR_P) "$(distdir)/$$subdir" \
	      || exit 1; \
	    dir1=$$subdir; dir2="$(distdir)/$$subdir"; \
	    $(am__relativize); \
	    new_distdir=$$reldir; \
	    dir1=$$subdir; dir2="$(top_distdir)"; \
	    $(am__relativize); \
	    new_top_distdir=$$reldir; \
	    echo " (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) top_distdir="$$new_top_distdir" distdir="$$new_distdir" \\"; \
	    echo "     am__remove_distdir=: am__skip_length_check=: am__skip_mode_fix=: distdir)"; \
	    ($(am__cd) $$subdir && \
	      $(MAKE) $(AM_MAKEFLAGS) \
	        top_distdir="$$new_top_distdir" \
	        distdir="$$new_distdir" \
		am__remove_distdir=: \
		am__skip_length_check=: \
		am__skip_mode_fix=: \
	        distdir) \
	      || exit 1; \
	  fi; \
	done
check-am: all-am
check: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) check-recursive
all-am: Makefile $(PROGRAMS) $(DATA) $(HEADERS)
installdirs: installdirs-recursive
installdirs-am:
	for dir in "$(DESTDIR)$(bindir)" "$(DESTDIR)$(desktopdir)" "$(DESTDIR)$(beepincludedir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) install-recursive
install-exec: install-exec-recursive
install-data: install-data-recursive
uninstall: uninstall-recursive

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-recursive
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
	-test -z "$(BUILT_SOURCES)" || rm -f $(BUILT_SOURCES)
clean: clean-recursive

clean-am: clean-binPROGRAMS clean-generic clean-libtool mostlyclean-am

distclean: distclean-recursive
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-recursive

dvi-am:

html: html-recursive

html-am:

info: info-recursive

info-am:

install-data-am: install-beepincludeHEADERS install-desktopDATA

install-dvi: install-dvi-recursive

install-dvi-am:

install-exec-am: install-binPROGRAMS

install-html: install-html-recursive

install-html-am:

install-info: install-info-recursive

install-info-am:

install-man:

install-pdf: install-pdf-recursive

install-pdf-am:

install-ps: install-ps-recursive

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-recursive
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-recursive

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-recursive

pdf-am:

ps: ps-recursive

ps-am:

uninstall-am: uninstall-beepincludeHEADERS uninstall-binPROGRAMS \
	uninstall-desktopDATA

.MAKE: $(am__recursive_targets) all check install install-am \
	install-strip

.PHONY: $(am__recursive_targets) CTAGS GTAGS TAGS all all-am check \
	check-am clean clean-binPROGRAMS clean-generic clean-libtool \
	cscopelist-am ctags ctags-am distclean distclean-compile \
	distclean-generic distclean-libtool distclean-tags distdir dvi \
	dvi-am html html-am info info-am install install-am \
	install-beepincludeHEADERS install-binPROGRAMS install-data \
	install-data-am install-desktopDATA install-dvi install-dvi-am \
	install-exec install-exec-am install-html install-html-am \
	install-info install-info-am install-man install-pdf \
	install-pdf-am install-ps install-ps-am install-strip \
	installcheck installcheck-am installdirs installdirs-am \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic mostlyclean-libtool \
	pdf pdf-am ps ps-am tags tags-am uninstall uninstall-am \
	uninstall-beepincludeHEADERS uninstall-binPROGRAMS \
	uninstall-desktopDATA

.PRECIOUS: Makefile


pixmaps.h: $(embedded_icons)
	gdk-pixbuf-csource --stream --build-list `cat build.list` > pixmaps.h

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
